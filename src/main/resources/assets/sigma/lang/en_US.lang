psimisc.providerMod.Sigma=Sigma

#Datatype
psi.datatype.Boolean=Boolean

#Pieces
psi.spellpiece.booleanTrue=Boolean: True
psi.spellpiece.booleanTrue.desc=True constant
psi.spellpiece.booleanFalse=Boolean: False
psi.spellpiece.booleanFalse.desc=False constant
psi.spellpiece.booleanOperatorEquals=Boolean: Equals
psi.spellpiece.booleanOperatorEquals.desc=A == B (== C)
psi.spellpiece.booleanOperatorNotEquals=Boolean: Not Equals
psi.spellpiece.booleanOperatorNotEquals.desc=A != B (or A != C)
psi.spellpiece.booleanOperatorGreaterThan=Boolean: Greater Than
psi.spellpiece.booleanOperatorGreaterThan.desc=A > B
psi.spellpiece.booleanOperatorGreaterThanOrEquals=Boolean: Greater Than Or Equals
psi.spellpiece.booleanOperatorGreaterThanOrEquals.desc=A >= B
psi.spellpiece.booleanOperatorLessThan=Boolean: Less Than
psi.spellpiece.booleanOperatorLessThan.desc=A < B
psi.spellpiece.booleanOperatorLessThanOrEquals=Boolean: Less Than Or Equals
psi.spellpiece.booleanOperatorLessThanOrEquals.desc=A <= B
psi.spellpiece.booleanOperatorTernary=Boolean: Ternary
psi.spellpiece.booleanOperatorTernary.desc=A ? B : C
psi.spellpiece.booleanOperatorOr=Boolean: Or
psi.spellpiece.booleanOperatorOr.desc=A || B (|| C)
psi.spellpiece.booleanOperatorAnd=Boolean: And
psi.spellpiece.booleanOperatorAnd.desc=A && B (&& C)
psi.spellpiece.booleanOperatorNot=Boolean: Not
psi.spellpiece.booleanOperatorNot.desc=Invert boolean
psi.spellpiece.booleanOperatorPlayerShifting=Boolean: Caster sneaking
psi.spellpiece.booleanOperatorPlayerShifting.desc=If the caster is sneaking

psi.spellpiece.castOperatorToNumber=Cast: To number
psi.spellpiece.castOperatorToNumber.desc=Cast object to number
psi.spellpiece.castOperatorToBoolean=Cast: To boolean
psi.spellpiece.castOperatorToBoolean.desc=0 or any object = true/other number or null object = false

psi.spellpiece.FlowControlWhile=Flow: While loop
psi.spellpiece.FlowControlWhile.desc=While A be true, execute Trick. (If B be true, error won't stop loop)
psi.spellpiece.FlowControlFor=Flow: For loop
psi.spellpiece.FlowControlFor.desc=Loop From 0(or Number B) to Number A. (If B be true, error won't stop loop)
psi.spellpiece.FlowIf=Flow: IF
psi.spellpiece.FlowIf.desc=If Boolean C be true, execute Trick A else execute Trick B
psi.spellpiece.FlowSequence=Flow: Sequence
psi.spellpiece.FlowSequence.desc=Execute the Trick A and Trick B, in sequence

psi.spellpiece.VariableForLoopIndex=Variable: For Loop Index
psi.spellpiece.VariableForLoopIndex.desc=Get index of nearest "For loop"
psi.spellpiece.VariableGet=Variable: Get value
psi.spellpiece.VariableGet.desc=Get value from index
psi.spellpiece.VariableSet=Variable: Set value
psi.spellpiece.VariableSet.desc=Set value to index
psi.spellpiece.ConstantNull=Constant: Null
psi.spellpiece.ConstantNull.desc=Null value

#ParamName
viniciuslrangel.sigma.boolean1=Boolean A
viniciuslrangel.sigma.boolean2=Boolean B
viniciuslrangel.sigma.boolean3=Boolean C

viniciuslrangel.sigma.object1=Object A
viniciuslrangel.sigma.object2=Object B
viniciuslrangel.sigma.object3=Object C

viniciuslrangel.sigma.piece1=Trick A
viniciuslrangel.sigma.piece2=Trick B
viniciuslrangel.sigma.piece3=Trick C

#Exception
viniciuslrangel.sigma.numberformatexception=Number Format Error
viniciuslrangel.sigma.infinityloopexception=Loop limit

#Groups
psi.piecegroup.advancedFlowControl=Advanced Flow Control
psi.piecegroup.advancedFlowControl.desc=Add Controlled Loops and others statements that you can control Trick execution.

psi.piecegroup.booleanSystem=Booleans
psi.piecegroup.booleanSystem.desc=You can use boolean to compare and process values to do more specific tricks.

psi.piecegroup.variableSystem=Variables
psi.piecegroup.variableSystem.desc=Storage values for keep then inside loops.